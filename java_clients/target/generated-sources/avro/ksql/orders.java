/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ksql;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class orders extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5311675519304057946L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"orders\",\"namespace\":\"ksql\",\"fields\":[{\"name\":\"ordertime\",\"type\":\"long\"},{\"name\":\"orderid\",\"type\":\"int\"},{\"name\":\"itemid\",\"type\":\"string\"},{\"name\":\"orderunits\",\"type\":\"double\"},{\"name\":\"address\",\"type\":{\"type\":\"record\",\"name\":\"address\",\"fields\":[{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"zipcode\",\"type\":\"long\"}],\"connect.name\":\"ksql.address\"}},{\"name\":\"extrafield_evolution\",\"type\":\"string\"}],\"connect.name\":\"ksql.orders\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<orders> ENCODER =
      new BinaryMessageEncoder<orders>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<orders> DECODER =
      new BinaryMessageDecoder<orders>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<orders> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<orders> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<orders> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<orders>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this orders to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a orders from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a orders instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static orders fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long ordertime;
  @Deprecated public int orderid;
  @Deprecated public java.lang.CharSequence itemid;
  @Deprecated public double orderunits;
  @Deprecated public ksql.address address;
  @Deprecated public java.lang.CharSequence extrafield_evolution;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public orders() {}

  /**
   * All-args constructor.
   * @param ordertime The new value for ordertime
   * @param orderid The new value for orderid
   * @param itemid The new value for itemid
   * @param orderunits The new value for orderunits
   * @param address The new value for address
   * @param extrafield_evolution The new value for extrafield_evolution
   */
  public orders(java.lang.Long ordertime, java.lang.Integer orderid, java.lang.CharSequence itemid, java.lang.Double orderunits, ksql.address address, java.lang.CharSequence extrafield_evolution) {
    this.ordertime = ordertime;
    this.orderid = orderid;
    this.itemid = itemid;
    this.orderunits = orderunits;
    this.address = address;
    this.extrafield_evolution = extrafield_evolution;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ordertime;
    case 1: return orderid;
    case 2: return itemid;
    case 3: return orderunits;
    case 4: return address;
    case 5: return extrafield_evolution;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ordertime = (java.lang.Long)value$; break;
    case 1: orderid = (java.lang.Integer)value$; break;
    case 2: itemid = (java.lang.CharSequence)value$; break;
    case 3: orderunits = (java.lang.Double)value$; break;
    case 4: address = (ksql.address)value$; break;
    case 5: extrafield_evolution = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ordertime' field.
   * @return The value of the 'ordertime' field.
   */
  public long getOrdertime() {
    return ordertime;
  }


  /**
   * Sets the value of the 'ordertime' field.
   * @param value the value to set.
   */
  public void setOrdertime(long value) {
    this.ordertime = value;
  }

  /**
   * Gets the value of the 'orderid' field.
   * @return The value of the 'orderid' field.
   */
  public int getOrderid() {
    return orderid;
  }


  /**
   * Sets the value of the 'orderid' field.
   * @param value the value to set.
   */
  public void setOrderid(int value) {
    this.orderid = value;
  }

  /**
   * Gets the value of the 'itemid' field.
   * @return The value of the 'itemid' field.
   */
  public java.lang.CharSequence getItemid() {
    return itemid;
  }


  /**
   * Sets the value of the 'itemid' field.
   * @param value the value to set.
   */
  public void setItemid(java.lang.CharSequence value) {
    this.itemid = value;
  }

  /**
   * Gets the value of the 'orderunits' field.
   * @return The value of the 'orderunits' field.
   */
  public double getOrderunits() {
    return orderunits;
  }


  /**
   * Sets the value of the 'orderunits' field.
   * @param value the value to set.
   */
  public void setOrderunits(double value) {
    this.orderunits = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public ksql.address getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(ksql.address value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'extrafield_evolution' field.
   * @return The value of the 'extrafield_evolution' field.
   */
  public java.lang.CharSequence getExtrafieldEvolution() {
    return extrafield_evolution;
  }


  /**
   * Sets the value of the 'extrafield_evolution' field.
   * @param value the value to set.
   */
  public void setExtrafieldEvolution(java.lang.CharSequence value) {
    this.extrafield_evolution = value;
  }

  /**
   * Creates a new orders RecordBuilder.
   * @return A new orders RecordBuilder
   */
  public static ksql.orders.Builder newBuilder() {
    return new ksql.orders.Builder();
  }

  /**
   * Creates a new orders RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new orders RecordBuilder
   */
  public static ksql.orders.Builder newBuilder(ksql.orders.Builder other) {
    if (other == null) {
      return new ksql.orders.Builder();
    } else {
      return new ksql.orders.Builder(other);
    }
  }

  /**
   * Creates a new orders RecordBuilder by copying an existing orders instance.
   * @param other The existing instance to copy.
   * @return A new orders RecordBuilder
   */
  public static ksql.orders.Builder newBuilder(ksql.orders other) {
    if (other == null) {
      return new ksql.orders.Builder();
    } else {
      return new ksql.orders.Builder(other);
    }
  }

  /**
   * RecordBuilder for orders instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<orders>
    implements org.apache.avro.data.RecordBuilder<orders> {

    private long ordertime;
    private int orderid;
    private java.lang.CharSequence itemid;
    private double orderunits;
    private ksql.address address;
    private ksql.address.Builder addressBuilder;
    private java.lang.CharSequence extrafield_evolution;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ksql.orders.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ordertime)) {
        this.ordertime = data().deepCopy(fields()[0].schema(), other.ordertime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.orderid)) {
        this.orderid = data().deepCopy(fields()[1].schema(), other.orderid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.itemid)) {
        this.itemid = data().deepCopy(fields()[2].schema(), other.itemid);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.orderunits)) {
        this.orderunits = data().deepCopy(fields()[3].schema(), other.orderunits);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasAddressBuilder()) {
        this.addressBuilder = ksql.address.newBuilder(other.getAddressBuilder());
      }
      if (isValidValue(fields()[5], other.extrafield_evolution)) {
        this.extrafield_evolution = data().deepCopy(fields()[5].schema(), other.extrafield_evolution);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing orders instance
     * @param other The existing instance to copy.
     */
    private Builder(ksql.orders other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.ordertime)) {
        this.ordertime = data().deepCopy(fields()[0].schema(), other.ordertime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderid)) {
        this.orderid = data().deepCopy(fields()[1].schema(), other.orderid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.itemid)) {
        this.itemid = data().deepCopy(fields()[2].schema(), other.itemid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orderunits)) {
        this.orderunits = data().deepCopy(fields()[3].schema(), other.orderunits);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = true;
      }
      this.addressBuilder = null;
      if (isValidValue(fields()[5], other.extrafield_evolution)) {
        this.extrafield_evolution = data().deepCopy(fields()[5].schema(), other.extrafield_evolution);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'ordertime' field.
      * @return The value.
      */
    public long getOrdertime() {
      return ordertime;
    }


    /**
      * Sets the value of the 'ordertime' field.
      * @param value The value of 'ordertime'.
      * @return This builder.
      */
    public ksql.orders.Builder setOrdertime(long value) {
      validate(fields()[0], value);
      this.ordertime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ordertime' field has been set.
      * @return True if the 'ordertime' field has been set, false otherwise.
      */
    public boolean hasOrdertime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ordertime' field.
      * @return This builder.
      */
    public ksql.orders.Builder clearOrdertime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderid' field.
      * @return The value.
      */
    public int getOrderid() {
      return orderid;
    }


    /**
      * Sets the value of the 'orderid' field.
      * @param value The value of 'orderid'.
      * @return This builder.
      */
    public ksql.orders.Builder setOrderid(int value) {
      validate(fields()[1], value);
      this.orderid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderid' field has been set.
      * @return True if the 'orderid' field has been set, false otherwise.
      */
    public boolean hasOrderid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orderid' field.
      * @return This builder.
      */
    public ksql.orders.Builder clearOrderid() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemid' field.
      * @return The value.
      */
    public java.lang.CharSequence getItemid() {
      return itemid;
    }


    /**
      * Sets the value of the 'itemid' field.
      * @param value The value of 'itemid'.
      * @return This builder.
      */
    public ksql.orders.Builder setItemid(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.itemid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'itemid' field has been set.
      * @return True if the 'itemid' field has been set, false otherwise.
      */
    public boolean hasItemid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'itemid' field.
      * @return This builder.
      */
    public ksql.orders.Builder clearItemid() {
      itemid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderunits' field.
      * @return The value.
      */
    public double getOrderunits() {
      return orderunits;
    }


    /**
      * Sets the value of the 'orderunits' field.
      * @param value The value of 'orderunits'.
      * @return This builder.
      */
    public ksql.orders.Builder setOrderunits(double value) {
      validate(fields()[3], value);
      this.orderunits = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'orderunits' field has been set.
      * @return True if the 'orderunits' field has been set, false otherwise.
      */
    public boolean hasOrderunits() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'orderunits' field.
      * @return This builder.
      */
    public ksql.orders.Builder clearOrderunits() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public ksql.address getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public ksql.orders.Builder setAddress(ksql.address value) {
      validate(fields()[4], value);
      this.addressBuilder = null;
      this.address = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'address' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ksql.address.Builder getAddressBuilder() {
      if (addressBuilder == null) {
        if (hasAddress()) {
          setAddressBuilder(ksql.address.newBuilder(address));
        } else {
          setAddressBuilder(ksql.address.newBuilder());
        }
      }
      return addressBuilder;
    }

    /**
     * Sets the Builder instance for the 'address' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public ksql.orders.Builder setAddressBuilder(ksql.address.Builder value) {
      clearAddress();
      addressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'address' field has an active Builder instance
     * @return True if the 'address' field has an active Builder instance
     */
    public boolean hasAddressBuilder() {
      return addressBuilder != null;
    }

    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public ksql.orders.Builder clearAddress() {
      address = null;
      addressBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'extrafield_evolution' field.
      * @return The value.
      */
    public java.lang.CharSequence getExtrafieldEvolution() {
      return extrafield_evolution;
    }


    /**
      * Sets the value of the 'extrafield_evolution' field.
      * @param value The value of 'extrafield_evolution'.
      * @return This builder.
      */
    public ksql.orders.Builder setExtrafieldEvolution(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.extrafield_evolution = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'extrafield_evolution' field has been set.
      * @return True if the 'extrafield_evolution' field has been set, false otherwise.
      */
    public boolean hasExtrafieldEvolution() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'extrafield_evolution' field.
      * @return This builder.
      */
    public ksql.orders.Builder clearExtrafieldEvolution() {
      extrafield_evolution = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public orders build() {
      try {
        orders record = new orders();
        record.ordertime = fieldSetFlags()[0] ? this.ordertime : (java.lang.Long) defaultValue(fields()[0]);
        record.orderid = fieldSetFlags()[1] ? this.orderid : (java.lang.Integer) defaultValue(fields()[1]);
        record.itemid = fieldSetFlags()[2] ? this.itemid : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.orderunits = fieldSetFlags()[3] ? this.orderunits : (java.lang.Double) defaultValue(fields()[3]);
        if (addressBuilder != null) {
          try {
            record.address = this.addressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("address"));
            throw e;
          }
        } else {
          record.address = fieldSetFlags()[4] ? this.address : (ksql.address) defaultValue(fields()[4]);
        }
        record.extrafield_evolution = fieldSetFlags()[5] ? this.extrafield_evolution : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<orders>
    WRITER$ = (org.apache.avro.io.DatumWriter<orders>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<orders>
    READER$ = (org.apache.avro.io.DatumReader<orders>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.ordertime);

    out.writeInt(this.orderid);

    out.writeString(this.itemid);

    out.writeDouble(this.orderunits);

    this.address.customEncode(out);

    out.writeString(this.extrafield_evolution);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ordertime = in.readLong();

      this.orderid = in.readInt();

      this.itemid = in.readString(this.itemid instanceof Utf8 ? (Utf8)this.itemid : null);

      this.orderunits = in.readDouble();

      if (this.address == null) {
        this.address = new ksql.address();
      }
      this.address.customDecode(in);

      this.extrafield_evolution = in.readString(this.extrafield_evolution instanceof Utf8 ? (Utf8)this.extrafield_evolution : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ordertime = in.readLong();
          break;

        case 1:
          this.orderid = in.readInt();
          break;

        case 2:
          this.itemid = in.readString(this.itemid instanceof Utf8 ? (Utf8)this.itemid : null);
          break;

        case 3:
          this.orderunits = in.readDouble();
          break;

        case 4:
          if (this.address == null) {
            this.address = new ksql.address();
          }
          this.address.customDecode(in);
          break;

        case 5:
          this.extrafield_evolution = in.readString(this.extrafield_evolution instanceof Utf8 ? (Utf8)this.extrafield_evolution : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










